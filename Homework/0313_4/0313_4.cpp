// 함수를 실행하는데 필요한 메모리 비용은 언제나 인자 전체 크기 + a -> plus : 8바이트 + a , test : 4바이트 + a
// {} : 스코프 , 실행흐름의 시작과 끝을 표현하는 기호, 이름이 있는 실행흐름 안에서만 가능
// 어떤 스코프 안에선 unname scope만 사용가능
// 실행흐름(함수)이 끝나면 스택영역에 어떠한 메모리도 존재되지 않음
// 스택->힙->데이터->코드영역 순으로 지워지면서 프로그램이 끝남
// 맨처음 실행되는거 : main
// f11을 누르면 다른 이름있는 실행흐름 내부로 넘어갈 수 있음 
// f10은 그 실행흐름을 한번에 다 실행해버리는 용도가 생기게 됨 
// 함수 선언방법 
// - 다른 함수 내부에서는 선언하지 못함
// - 리턴값이 있어야함
// - 함수가 많을수록 코드가 느려짐->main 안에 다 떄려박은게 제일 빠름
// - 리턴값이 void : 아무것도 보내지 않겠다
// 함수 이름 필요한 이유
// - 메모리를 써서 그것을 표현함->그에 대한 위치도 있어야함
// - 이름은 위치를 의미
// - 주소값 = 이름 = 위치
// - 실행 됐다면 모든건 램에서 내 프로그램이 실행된 프로세스의 영역 안에 존재
// 램이란 n바이트의 1열
// 모든 이름은 결국 n번째 식으로 해석되어야 함
// 인자 : 그 실행흐름의 지역변수
// 리턴 : 자신을 호출한 외부 메모리영역에 전달하는 메모리값
// 리턴 사용한 즉시 자신을 포함한 메모리값을 끝냄


// 실행흐름 만들고 그거에 이름붙히면 함수 
// int : 리턴값  main : 이름  () : 이 함수에 넘길게 있느냐
int plus(int _left, int _right)
{ // 함수의 시작
	return _left + _right;
} // 함수의 끝


void test(int _value) 
{
	_value = 10;
	return;
} 

//main scope
int main()
{
	// unname scope
	{
		int V = 100;
		// 이 실행흐름이 끝나면 V는 사라짐
	}


	// 4바이트 호출
	// 함수 실행 방법
	plus(20, 30);
	bool result = plus(20, 30);
	// 4바이트가 리턴돼서 1바이트로 들어감 -> result : true
	// plus함수를 호출하면서 4바이트 사용
	int _value = 20;
	test(_value);
	int size = sizeof(plus(20, 30)); // size = 4
	}